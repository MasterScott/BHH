/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main.pt.ipleiria.estg.dei.labcif.bhh.panels.mainPanel;

import main.pt.ipleiria.estg.dei.labcif.bhh.database.DatasetRepository;
import main.pt.ipleiria.estg.dei.labcif.bhh.exceptions.ConnectionException;
import main.pt.ipleiria.estg.dei.labcif.bhh.panels.reportModulePanel.BrowserHistoryReportConfigurationPanel;
import main.pt.ipleiria.estg.dei.labcif.bhh.utils.BrowserHistoryStandaloneModule;
import main.pt.ipleiria.estg.dei.labcif.bhh.utils.LoggerBHH;
import main.pt.ipleiria.estg.dei.labcif.bhh.utils.OperatingSystemUtils;
import main.pt.ipleiria.estg.dei.labcif.bhh.utils.Utils;
import org.openide.util.NbBundle;

import javax.swing.*;
import java.net.URL;
import java.sql.SQLException;

/**
 * @author Kevin
 */
public class MainFrame extends javax.swing.JFrame {

    private static MainFrame instance = null;
    private LoggerBHH loggerBHH;
    private BrowserHistoryStandaloneModule browserHistoryStandaloneModule;
    private DatasetRepository datasetRepository;

    private MainFrame() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
        initComponents();
        URL iconLocation = getClass().getResource("/resources/images/favicon.ico");
        ImageIcon imageIcon = new ImageIcon(iconLocation);
        setIconImage(imageIcon.getImage());
        txtFieldDirectory.setEnabled(false);
        txtAreaLogs.setEnabled(false);
        loggerBHH = new LoggerBHH<>(MainFrame.class);
        extractConfigurationSetup();


    }

    private void extractConfigurationSetup() {
        fillChoiceExtractConfiguration();
        textAreaExtractionExplanation.setEnabled(false);
        textAreaExtractionExplanation.setText(NbBundle.getMessage(MainFrame.class, "MainFrame.labelExplanation.text"));
    }

    private void fillChoiceExtractConfiguration() {
        choiceExtractWebsite.add(NbBundle.getMessage(MainFrame.class, "MainFrame.choice.defaultList"));
        choiceExtractWebsite.add(NbBundle.getMessage(MainFrame.class, "MainFrame.choice.customList"));
        choiceExtractWebsite.add(NbBundle.getMessage(MainFrame.class, "MainFrame.choice.none"));
        disableImportCustomWebsiteFile();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        menuBar2 = new java.awt.MenuBar();
        menu3 = new java.awt.Menu();
        menu4 = new java.awt.Menu();
        canvas1 = new java.awt.Canvas();
        java.awt.Panel extractConfiguration = new java.awt.Panel();
        label4 = new java.awt.Label();
        jPanel2 = new javax.swing.JPanel();
        label2 = new java.awt.Label();
        choiceExtractWebsite = new java.awt.Choice();
        txtFileChoosed = new java.awt.TextField();
        label3 = new java.awt.Label();
        btnImportWebsiteFile = new java.awt.Button();
        textAreaExtractionExplanation = new java.awt.TextArea();
        btnDownloadTemplate = new java.awt.Button();
        generalConfiguration = new java.awt.Panel();
        txtFieldDirectory = new java.awt.TextField();
        label1 = new java.awt.Label();
        btnSelectDirectory = new java.awt.Button();
        label5 = new java.awt.Label();
        btnGenerateReport = new java.awt.Button();
        btnExtract = new java.awt.Button();
        output = new java.awt.Panel();
        txtAreaLogs = new java.awt.TextArea();
        reportConfiguration = new java.awt.Panel();
        reportPanel = new BrowserHistoryReportConfigurationPanel(null);
        label7 = new java.awt.Label();

        menu1.setLabel(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.menu1.label")); // NOI18N
        menuBar1.add(menu1);

        menu2.setLabel(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.menu2.label")); // NOI18N
        menuBar1.add(menu2);

        menu3.setLabel(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.menu3.label")); // NOI18N
        menuBar2.add(menu3);

        menu4.setLabel(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.menu4.label")); // NOI18N
        menuBar2.add(menu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.title")); // NOI18N
        setAlwaysOnTop(true);

        extractConfiguration.setPreferredSize(new java.awt.Dimension(500, 350));

        label4.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        label4.setText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.label4.text")); // NOI18N

        label2.setText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.label2.text")); // NOI18N

        choiceExtractWebsite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choiceExtractWebsiteItemStateChanged(evt);
            }
        });

        txtFileChoosed.setText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.txtFileChoosed.text")); // NOI18N

        label3.setText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.label3.text")); // NOI18N

        btnImportWebsiteFile.setLabel(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.btnImportWebsiteFile.label")); // NOI18N
        btnImportWebsiteFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportWebsiteFileActionPerformed(evt);
            }
        });

        btnDownloadTemplate.setLabel(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.btnDownloadTemplate.label")); // NOI18N
        btnDownloadTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadTemplateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(txtFileChoosed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(choiceExtractWebsite, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnImportWebsiteFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(159, 159, 159)
                                                .addComponent(btnDownloadTemplate, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(textAreaExtractionExplanation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(29, 29, 29))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(choiceExtractWebsite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnImportWebsiteFile, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtFileChoosed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textAreaExtractionExplanation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDownloadTemplate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(105, Short.MAX_VALUE))
        );

        label3.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.label3.AccessibleContext.accessibleName")); // NOI18N

        javax.swing.GroupLayout extractConfigurationLayout = new javax.swing.GroupLayout(extractConfiguration);
        extractConfiguration.setLayout(extractConfigurationLayout);
        extractConfigurationLayout.setHorizontalGroup(
                extractConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(extractConfigurationLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(extractConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(extractConfigurationLayout.createSequentialGroup()
                                                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        extractConfigurationLayout.setVerticalGroup(
                extractConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, extractConfigurationLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        getContentPane().add(extractConfiguration, java.awt.BorderLayout.WEST);

        txtFieldDirectory.setText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.txtFieldDirectory.text")); // NOI18N

        label1.setText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.label1.text")); // NOI18N

        btnSelectDirectory.setLabel(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.label")); // NOI18N
        btnSelectDirectory.setName(""); // NOI18N
        btnSelectDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectDirectoryActionPerformed(evt);
            }
        });

        label5.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        label5.setText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.label5.text")); // NOI18N

        btnGenerateReport.setLabel(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.btnGenerateReport.label")); // NOI18N
        btnGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateReportActionPerformed(evt);
            }
        });

        btnExtract.setLabel(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.btnExtract.label")); // NOI18N
        btnExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout generalConfigurationLayout = new javax.swing.GroupLayout(generalConfiguration);
        generalConfiguration.setLayout(generalConfigurationLayout);
        generalConfigurationLayout.setHorizontalGroup(
                generalConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(generalConfigurationLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(generalConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(generalConfigurationLayout.createSequentialGroup()
                                                .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(generalConfigurationLayout.createSequentialGroup()
                                                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtFieldDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(19, 19, 19)
                                                .addComponent(btnSelectDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                                                .addComponent(btnExtract, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(44, 44, 44)
                                                .addComponent(btnGenerateReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(92, 92, 92))))
        );
        generalConfigurationLayout.setVerticalGroup(
                generalConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generalConfigurationLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(generalConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnSelectDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtFieldDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnExtract, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnGenerateReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28))
        );

        btnSelectDirectory.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.AccessibleContext.accessibleName")); // NOI18N
        btnSelectDirectory.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.AccessibleContext.accessibleDescription")); // NOI18N

        getContentPane().add(generalConfiguration, java.awt.BorderLayout.NORTH);

        output.setLayout(new java.awt.BorderLayout());
        output.add(txtAreaLogs, java.awt.BorderLayout.NORTH);

        getContentPane().add(output, java.awt.BorderLayout.SOUTH);

        reportConfiguration.setPreferredSize(new java.awt.Dimension(500, 350));

        javax.swing.GroupLayout reportPanelLayout = new javax.swing.GroupLayout(reportPanel);
        reportPanel.setLayout(reportPanelLayout);
        reportPanelLayout.setHorizontalGroup(
                reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        reportPanelLayout.setVerticalGroup(
                reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 289, Short.MAX_VALUE)
        );

        label7.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        label7.setText(org.openide.util.NbBundle.getMessage(MainFrame.class, "MainFrame.label7.text_1")); // NOI18N

        javax.swing.GroupLayout reportConfigurationLayout = new javax.swing.GroupLayout(reportConfiguration);
        reportConfiguration.setLayout(reportConfigurationLayout);
        reportConfigurationLayout.setHorizontalGroup(
                reportConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(reportConfigurationLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(reportConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(reportPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(reportConfigurationLayout.createSequentialGroup()
                                                .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 306, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        reportConfigurationLayout.setVerticalGroup(
                reportConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportConfigurationLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reportPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        getContentPane().add(reportConfiguration, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {
        checkBaseDirectorySelected();
        if (!hasExtractionBeenDone()) {
            JOptionPane.showMessageDialog(this, NbBundle.getMessage(MainFrame.class, "MainFrame.error.extractionNotRunned"));
            return;
        }
        disableAllButtons();
        browserHistoryStandaloneModule.executeTransformation((BrowserHistoryReportConfigurationPanel) reportPanel);
        enableAllButtons();
    }

    private void btnExtractActionPerformed(java.awt.event.ActionEvent evt) {
        checkBaseDirectorySelected();

        if (hasExtractionBeenDone()) {
            boolean hasBeenCleaned = askToCleanDatabase();
            if (!hasBeenCleaned) {
                return;
            }
        }

        if (isCustomListSelected() && (txtFileChoosed.getText() == null || txtFileChoosed.getText().isEmpty())) {
            JOptionPane.showMessageDialog(this, NbBundle.getMessage(MainFrame.class, "MainFrame.error.fileNotSelected"));
            return;
        }
        disableAllButtons();
        browserHistoryStandaloneModule.executeExtraction(isCustomListSelected(), txtFileChoosed.getText());
        ((BrowserHistoryReportConfigurationPanel) reportPanel).fillUsers(txtFieldDirectory.getText());
        enableAllButtons();
    }

    private void btnSelectDirectoryActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select a directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            txtFieldDirectory.setText(chooser.getSelectedFile().getPath());
            try {
                String caseDirectory = txtFieldDirectory.getText();
                browserHistoryStandaloneModule = new BrowserHistoryStandaloneModule(caseDirectory);
                datasetRepository = new DatasetRepository(caseDirectory);
                if (hasExtractionBeenDone()) {
                    ((BrowserHistoryReportConfigurationPanel) reportPanel).fillUsers(caseDirectory);
                }
            } catch (ConnectionException  e) {
                JOptionPane.showMessageDialog(this, "Couldn't connect to database: " + e.getMessage());
            }
        }
    }

    private boolean askToCleanDatabase() {
        int result = showConfirmationPanel();
        if (result == JOptionPane.YES_OPTION) {
            try {
                datasetRepository.dropAllTables();
                browserHistoryStandaloneModule = new BrowserHistoryStandaloneModule(txtFieldDirectory.getText());
                return true;
            } catch (ConnectionException | SQLException | ClassNotFoundException e) {
                loggerBHH.error(e.getMessage());
                return false;
            }
        } else {
            return false;
        }
    }

    private boolean hasExtractionBeenDone() {
        try {
            datasetRepository = new DatasetRepository(txtFieldDirectory.getText());
            return !datasetRepository.isFirstRunningImage(OperatingSystemUtils.getComputerName());
        } catch (SQLException | ConnectionException e) {
            loggerBHH.error("couldn't connect to database...");
            return false;
        }
    }

    private int showConfirmationPanel() {
        return JOptionPane.showConfirmDialog(this, "You have already run this image. Proceeding will clean all the database. Do you want to proceed?", "WARNING", JOptionPane.YES_NO_OPTION);
    }

    private void disableAllButtons() {
        btnSelectDirectory.setEnabled(false);
        btnExtract.setEnabled(false);
        btnGenerateReport.setEnabled(false);
        btnImportWebsiteFile.setEnabled(false);
        btnDownloadTemplate.setEnabled(false);
    }

    private void enableAllButtons() {
        btnSelectDirectory.setEnabled(true);
        btnExtract.setEnabled(true);
        btnGenerateReport.setEnabled(true);
        if (isCustomListSelected()) {
            btnImportWebsiteFile.setEnabled(true);
        } else {
            btnImportWebsiteFile.setEnabled(false);
        }
        btnDownloadTemplate.setEnabled(true);
    }

    private void checkBaseDirectorySelected() {
        if (txtFieldDirectory.getText() == null || txtFieldDirectory.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, NbBundle.getMessage(MainFrame.class, "MainFrame.error.directoryEmpty"));
            throw new IllegalArgumentException();
        }
    }

    private void btnImportWebsiteFileActionPerformed(java.awt.event.ActionEvent evt) {
        txtFileChoosed.setText(Utils.importCSVFile(this));
    }

    private void btnDownloadTemplateActionPerformed(java.awt.event.ActionEvent evt) {
        Utils.downloadExtractTemplate(this);
    }

    private boolean isCustomListSelected() {
        return choiceExtractWebsite.getSelectedItem() != null && choiceExtractWebsite.getSelectedItem().equals(NbBundle.getMessage(MainFrame.class, "MainFrame.choice.customList"));
    }

    private void enableImportCustomWebsiteFile() {
        txtFileChoosed.setEnabled(true);
        btnImportWebsiteFile.setEnabled(true);
    }

    private void disableImportCustomWebsiteFile() {
        txtFileChoosed.setEnabled(false);
        btnImportWebsiteFile.setEnabled(false);
    }

    private void choiceExtractWebsiteItemStateChanged(java.awt.event.ItemEvent evt) {
        if (isCustomListSelected()) {
            enableImportCustomWebsiteFile();
        } else {
            disableImportCustomWebsiteFile();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnDownloadTemplate;
    private java.awt.Button btnExtract;
    private java.awt.Button btnGenerateReport;
    private java.awt.Button btnImportWebsiteFile;
    private java.awt.Button btnSelectDirectory;
    private java.awt.Canvas canvas1;
    private java.awt.Choice choiceExtractWebsite;
    private java.awt.Panel generalConfiguration;
    private javax.swing.JPanel jPanel2;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label7;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.Menu menu3;
    private java.awt.Menu menu4;
    private java.awt.MenuBar menuBar1;
    private java.awt.MenuBar menuBar2;
    private java.awt.Panel output;
    private java.awt.Panel reportConfiguration;
    private javax.swing.JPanel reportPanel;
    private java.awt.TextArea textAreaExtractionExplanation;
    private java.awt.TextArea txtAreaLogs;
    private java.awt.TextField txtFieldDirectory;
    private java.awt.TextField txtFileChoosed;
    // End of variables declaration//GEN-END:variables

    public String getDirectory() {
        return txtFieldDirectory.getText();
    }


    public static MainFrame getInstance() {
        if (instance == null)
            instance = new MainFrame();
        return instance;
    }

    public void postMessage(String message) {
        txtAreaLogs.append(message + "\n");
    }
}
